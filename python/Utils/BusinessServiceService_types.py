##################################################
# file: BusinessServiceService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py http://www.jianzhou.sh.cn/JianzhouSMSWSServer/services/BusinessService?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://service.nineorange.com
##############################

class ns0:
    targetNamespace = "http://service.nineorange.com"

    class gxmt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "gxmt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gxmt_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sendDateTime"), aname="_sendDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobiles"), aname="_destmobiles", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgTexts"), aname="_msgTexts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._sendDateTime = None
                    self._destmobiles = None
                    self._msgTexts = None
                    return
            Holder.__name__ = "gxmt_Holder"
            self.pyclass = Holder

    class gxmtResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "gxmtResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gxmtResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gxmtReturn"), aname="_gxmtReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gxmtReturn = None
                    return
            Holder.__name__ = "gxmtResponse_Holder"
            self.pyclass = Holder

    class sendBatchMessageTimelyExt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "sendBatchMessageTimelyExt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sendBatchMessageTimelyExt_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sendDateTime"), aname="_sendDateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobile"), aname="_destmobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgText"), aname="_msgText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ext"), aname="_ext", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._sendDateTime = None
                    self._destmobile = None
                    self._msgText = None
                    self._ext = None
                    return
            Holder.__name__ = "sendBatchMessageTimelyExt_Holder"
            self.pyclass = Holder

    class sendBatchMessageTimelyExtResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "sendBatchMessageTimelyExtResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sendBatchMessageTimelyExtResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"return"), aname="_return", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "sendBatchMessageTimelyExtResponse_Holder"
            self.pyclass = Holder

    class sendGjBatchMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "sendGjBatchMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sendGjBatchMessage_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sendDateTime"), aname="_sendDateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobile"), aname="_destmobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgText"), aname="_msgText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._sendDateTime = None
                    self._destmobile = None
                    self._msgText = None
                    return
            Holder.__name__ = "sendGjBatchMessage_Holder"
            self.pyclass = Holder

    class sendGjBatchMessageResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "sendGjBatchMessageResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sendGjBatchMessageResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"return"), aname="_return", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "sendGjBatchMessageResponse_Holder"
            self.pyclass = Holder

    class sendAudio_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "sendAudio")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sendAudio_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sendDateTime"), aname="_sendDateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobile"), aname="_destmobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgText"), aname="_msgText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"srcMobile"), aname="_srcMobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._sendDateTime = None
                    self._destmobile = None
                    self._msgText = None
                    self._srcMobile = None
                    return
            Holder.__name__ = "sendAudio_Holder"
            self.pyclass = Holder

    class sendAudioResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.nineorange.com"
        type = (schema, "sendAudioResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sendAudioResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"return"), aname="_return", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "sendAudioResponse_Holder"
            self.pyclass = Holder

    class getReceipt_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReceipt"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.getReceipt_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"taskID"), aname="_taskID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","getReceipt")
            kw["aname"] = "_getReceipt"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._taskID = None
                    return
            Holder.__name__ = "getReceipt_Holder"
            self.pyclass = Holder

    class getReceiptResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReceiptResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.getReceiptResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getReceiptReturn"), aname="_getReceiptReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","getReceiptResponse")
            kw["aname"] = "_getReceiptResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getReceiptReturn = None
                    return
            Holder.__name__ = "getReceiptResponse_Holder"
            self.pyclass = Holder

    class getReceivedMsg_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReceivedMsg"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.getReceivedMsg_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"param"), aname="_param", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","getReceivedMsg")
            kw["aname"] = "_getReceivedMsg"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._param = None
                    return
            Holder.__name__ = "getReceivedMsg_Holder"
            self.pyclass = Holder

    class getReceivedMsgResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReceivedMsgResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.getReceivedMsgResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getReceivedMsgReturn"), aname="_getReceivedMsgReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","getReceivedMsgResponse")
            kw["aname"] = "_getReceivedMsgResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getReceivedMsgReturn = None
                    return
            Holder.__name__ = "getReceivedMsgResponse_Holder"
            self.pyclass = Holder

    class getUserInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserInfo"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.getUserInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","getUserInfo")
            kw["aname"] = "_getUserInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    return
            Holder.__name__ = "getUserInfo_Holder"
            self.pyclass = Holder

    class getUserInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserInfoResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.getUserInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getUserInfoReturn"), aname="_getUserInfoReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","getUserInfoResponse")
            kw["aname"] = "_getUserInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getUserInfoReturn = None
                    return
            Holder.__name__ = "getUserInfoResponse_Holder"
            self.pyclass = Holder

    class modifyPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyPassword"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.modifyPassword_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"oldPassword"), aname="_oldPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newPassword"), aname="_newPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","modifyPassword")
            kw["aname"] = "_modifyPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._oldPassword = None
                    self._newPassword = None
                    return
            Holder.__name__ = "modifyPassword_Holder"
            self.pyclass = Holder

    class modifyPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "modifyPasswordResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.modifyPasswordResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"modifyPasswordReturn"), aname="_modifyPasswordReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","modifyPasswordResponse")
            kw["aname"] = "_modifyPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modifyPasswordReturn = None
                    return
            Holder.__name__ = "modifyPasswordResponse_Holder"
            self.pyclass = Holder

    class sendBatchMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendBatchMessage"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendBatchMessage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobile"), aname="_destmobile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgText"), aname="_msgText", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendBatchMessage")
            kw["aname"] = "_sendBatchMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._destmobile = None
                    self._msgText = None
                    return
            Holder.__name__ = "sendBatchMessage_Holder"
            self.pyclass = Holder

    class sendBatchMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendBatchMessageResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendBatchMessageResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"sendBatchMessageReturn"), aname="_sendBatchMessageReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendBatchMessageResponse")
            kw["aname"] = "_sendBatchMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sendBatchMessageReturn = None
                    return
            Holder.__name__ = "sendBatchMessageResponse_Holder"
            self.pyclass = Holder

    class sendMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendMessage"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendMessage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobile"), aname="_destmobile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgText"), aname="_msgText", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendMessage")
            kw["aname"] = "_sendMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._destmobile = None
                    self._msgText = None
                    return
            Holder.__name__ = "sendMessage_Holder"
            self.pyclass = Holder

    class sendMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendMessageResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendMessageResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"sendMessageReturn"), aname="_sendMessageReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendMessageResponse")
            kw["aname"] = "_sendMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sendMessageReturn = None
                    return
            Holder.__name__ = "sendMessageResponse_Holder"
            self.pyclass = Holder

    class sendMmsMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendMmsMessages"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendMmsMessages_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phones"), aname="_phones", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mmsString"), aname="_mmsString", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendMmsMessages")
            kw["aname"] = "_sendMmsMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._phones = None
                    self._mmsString = None
                    return
            Holder.__name__ = "sendMmsMessages_Holder"
            self.pyclass = Holder

    class sendMmsMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendMmsMessagesResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendMmsMessagesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"sendMmsMessagesReturn"), aname="_sendMmsMessagesReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendMmsMessagesResponse")
            kw["aname"] = "_sendMmsMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sendMmsMessagesReturn = None
                    return
            Holder.__name__ = "sendMmsMessagesResponse_Holder"
            self.pyclass = Holder

    class sendPersonalMessages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendPersonalMessages"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendPersonalMessages_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destMobiles"), aname="_destMobiles", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgContents"), aname="_msgContents", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendPersonalMessages")
            kw["aname"] = "_sendPersonalMessages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._destMobiles = None
                    self._msgContents = None
                    return
            Holder.__name__ = "sendPersonalMessages_Holder"
            self.pyclass = Holder

    class sendPersonalMessagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendPersonalMessagesResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendPersonalMessagesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"sendPersonalMessagesReturn"), aname="_sendPersonalMessagesReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendPersonalMessagesResponse")
            kw["aname"] = "_sendPersonalMessagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sendPersonalMessagesReturn = None
                    return
            Holder.__name__ = "sendPersonalMessagesResponse_Holder"
            self.pyclass = Holder

    class sendTimelyMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendTimelyMessage"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendTimelyMessage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sendDateTime"), aname="_sendDateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destmobile"), aname="_destmobile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"msgText"), aname="_msgText", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendTimelyMessage")
            kw["aname"] = "_sendTimelyMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    self._sendDateTime = None
                    self._destmobile = None
                    self._msgText = None
                    return
            Holder.__name__ = "sendTimelyMessage_Holder"
            self.pyclass = Holder

    class sendTimelyMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendTimelyMessageResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.sendTimelyMessageResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"sendTimelyMessageReturn"), aname="_sendTimelyMessageReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","sendTimelyMessageResponse")
            kw["aname"] = "_sendTimelyMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sendTimelyMessageReturn = None
                    return
            Holder.__name__ = "sendTimelyMessageResponse_Holder"
            self.pyclass = Holder

    class validateUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "validateUser"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.validateUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"account"), aname="_account", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","validateUser")
            kw["aname"] = "_validateUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = None
                    self._password = None
                    return
            Holder.__name__ = "validateUser_Holder"
            self.pyclass = Holder

    class validateUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "validateUserResponse"
        schema = "http://service.nineorange.com"
        def __init__(self, **kw):
            ns = ns0.validateUserResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"validateUserReturn"), aname="_validateUserReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.nineorange.com","validateUserResponse")
            kw["aname"] = "_validateUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._validateUserReturn = None
                    return
            Holder.__name__ = "validateUserResponse_Holder"
            self.pyclass = Holder

    class gxmt_Dec(ElementDeclaration):
        literal = "gxmt"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","gxmt")
            kw["aname"] = "_gxmt"
            if ns0.gxmt_Def not in ns0.gxmt_Dec.__bases__:
                bases = list(ns0.gxmt_Dec.__bases__)
                bases.insert(0, ns0.gxmt_Def)
                ns0.gxmt_Dec.__bases__ = tuple(bases)

            ns0.gxmt_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gxmt_Dec_Holder"

    class gxmtResponse_Dec(ElementDeclaration):
        literal = "gxmtResponse"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","gxmtResponse")
            kw["aname"] = "_gxmtResponse"
            if ns0.gxmtResponse_Def not in ns0.gxmtResponse_Dec.__bases__:
                bases = list(ns0.gxmtResponse_Dec.__bases__)
                bases.insert(0, ns0.gxmtResponse_Def)
                ns0.gxmtResponse_Dec.__bases__ = tuple(bases)

            ns0.gxmtResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gxmtResponse_Dec_Holder"

    class sendBatchMessageTimelyExt_Dec(ElementDeclaration):
        literal = "sendBatchMessageTimelyExt"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","sendBatchMessageTimelyExt")
            kw["aname"] = "_sendBatchMessageTimelyExt"
            if ns0.sendBatchMessageTimelyExt_Def not in ns0.sendBatchMessageTimelyExt_Dec.__bases__:
                bases = list(ns0.sendBatchMessageTimelyExt_Dec.__bases__)
                bases.insert(0, ns0.sendBatchMessageTimelyExt_Def)
                ns0.sendBatchMessageTimelyExt_Dec.__bases__ = tuple(bases)

            ns0.sendBatchMessageTimelyExt_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sendBatchMessageTimelyExt_Dec_Holder"

    class sendBatchMessageTimelyExtResponse_Dec(ElementDeclaration):
        literal = "sendBatchMessageTimelyExtResponse"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","sendBatchMessageTimelyExtResponse")
            kw["aname"] = "_sendBatchMessageTimelyExtResponse"
            if ns0.sendBatchMessageTimelyExtResponse_Def not in ns0.sendBatchMessageTimelyExtResponse_Dec.__bases__:
                bases = list(ns0.sendBatchMessageTimelyExtResponse_Dec.__bases__)
                bases.insert(0, ns0.sendBatchMessageTimelyExtResponse_Def)
                ns0.sendBatchMessageTimelyExtResponse_Dec.__bases__ = tuple(bases)

            ns0.sendBatchMessageTimelyExtResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sendBatchMessageTimelyExtResponse_Dec_Holder"

    class sendGjBatchMessage_Dec(ElementDeclaration):
        literal = "sendGjBatchMessage"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","sendGjBatchMessage")
            kw["aname"] = "_sendGjBatchMessage"
            if ns0.sendGjBatchMessage_Def not in ns0.sendGjBatchMessage_Dec.__bases__:
                bases = list(ns0.sendGjBatchMessage_Dec.__bases__)
                bases.insert(0, ns0.sendGjBatchMessage_Def)
                ns0.sendGjBatchMessage_Dec.__bases__ = tuple(bases)

            ns0.sendGjBatchMessage_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sendGjBatchMessage_Dec_Holder"

    class sendGjBatchMessageResponse_Dec(ElementDeclaration):
        literal = "sendGjBatchMessageResponse"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","sendGjBatchMessageResponse")
            kw["aname"] = "_sendGjBatchMessageResponse"
            if ns0.sendGjBatchMessageResponse_Def not in ns0.sendGjBatchMessageResponse_Dec.__bases__:
                bases = list(ns0.sendGjBatchMessageResponse_Dec.__bases__)
                bases.insert(0, ns0.sendGjBatchMessageResponse_Def)
                ns0.sendGjBatchMessageResponse_Dec.__bases__ = tuple(bases)

            ns0.sendGjBatchMessageResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sendGjBatchMessageResponse_Dec_Holder"

    class sendAudio_Dec(ElementDeclaration):
        literal = "sendAudio"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","sendAudio")
            kw["aname"] = "_sendAudio"
            if ns0.sendAudio_Def not in ns0.sendAudio_Dec.__bases__:
                bases = list(ns0.sendAudio_Dec.__bases__)
                bases.insert(0, ns0.sendAudio_Def)
                ns0.sendAudio_Dec.__bases__ = tuple(bases)

            ns0.sendAudio_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sendAudio_Dec_Holder"

    class sendAudioResponse_Dec(ElementDeclaration):
        literal = "sendAudioResponse"
        schema = "http://service.nineorange.com"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.nineorange.com","sendAudioResponse")
            kw["aname"] = "_sendAudioResponse"
            if ns0.sendAudioResponse_Def not in ns0.sendAudioResponse_Dec.__bases__:
                bases = list(ns0.sendAudioResponse_Dec.__bases__)
                bases.insert(0, ns0.sendAudioResponse_Def)
                ns0.sendAudioResponse_Dec.__bases__ = tuple(bases)

            ns0.sendAudioResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "sendAudioResponse_Dec_Holder"

# end class ns0 (tns: http://service.nineorange.com)
